ext.maven_name='Solstice'
ext.maven_artifact = 'solstice'
ext.maven_desc='Single-classloader implementation of the Eclipse plugin registry and OSGi (including Declarative Services)'

apply from: 干.file('changelog.gradle')
apply plugin: 'java-library'
sourceCompatibility = java_compat
targetCompatibility = java_compat
apply from: 干.file('maven.gradle')
apply from: 干.file('sonatype.gradle')

jar.manifest.attributes.put('Implementation-Version', spotlessChangelog.versionNext)

String VER_SLF4J = '2.0.6'

sourceSets {
	testSetup1 {
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output
	}
	testSetup2 {
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output
	}
}
configurations {
	testSetup2Implementation.transitive = false
	testImplementation.extendsFrom(testSetup2Implementation)
}

dependencies {
	api 'com.diffplug.durian:durian-swt.os:4.1.1'
	implementation 'org.apache.felix:org.apache.felix.scr:2.2.4'
	// needed to shim out parts of the runtime
	implementation 'org.objenesis:objenesis:3.3'
	// needed to navigate p2
	implementation 'org.tukaani:xz:1.9'
	testSetup1Implementation 'org.tukaani:xz:1.9'
	implementation 'com.squareup.okhttp3:okhttp:4.10.0'
	testSetup1Implementation 'com.squareup.okhttp3:okhttp:4.10.0'

	compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
	compileOnly 'com.google.code.findbugs:annotations:3.0.1'
	implementation "org.slf4j:slf4j-api:$VER_SLF4J"

	testImplementation "org.slf4j:slf4j-simple:$VER_SLF4J"
	testImplementation "org.junit.jupiter:junit-jupiter:$VER_JUNIT"
	testImplementation "org.assertj:assertj-core:$VER_ASSERTJ"
	testImplementation "io.github.origin-energy:java-snapshot-testing-junit5:$VER_SNAPSHOT_TESTING"

	constraints {
		testSetup2Implementation("org.slf4j:slf4j-api:$VER_SLF4J") {
			because "we're getting 2.0.0-alpha6 for some reason"
		}
	}
}

String cacheRoot = System.getProperty("user.home") + "/.equo/p2-bundle-pool/"
file('mavenJarsNeededForTest').readLines().forEach {
	if (it.startsWith("maven ")) {
		dependencies.testSetup2Implementation it.substring("maven ".length())
	} else if (it.startsWith("file ")) {
		dependencies.testSetup2Implementation files(cacheRoot + it.substring("file ".length()))
	}
}
file('nestedJarsNeededForTest').readLines().forEach {
	dependencies.testImplementation files(it)
}

tasks.register('mavenJarsNeededForTest', JavaExec) {
	classpath = sourceSets.testSetup1.runtimeClasspath
	mainClass = 'dev.equo.solstice.MavenJarsNeededForTest'
}

tasks.register('nestedJarsNeededForTest', JavaExec) {
	dependsOn 'mavenJarsNeededForTest'
	classpath = sourceSets.testSetup2.runtimeClasspath
	mainClass = 'dev.equo.solstice.NestedJarsNeededForTest'
}
tasks.named('test') {
	dependsOn 'nestedJarsNeededForTest'
	useJUnitPlatform {}
	if (System.env['CI'] == null) {
		systemProperty "updateSnapshot", ""
	}
	if (com.diffplug.common.swt.os.OS.getNative().isMac()) {
		jvmArgs = ['-XstartOnFirstThread']
	}
}

dependencies {
	testSetup1Implementation 'com.diffplug.durian:durian-swt.os:4.1.1'
}

apply plugin: 'com.diffplug.eclipse.mavencentral'
eclipseMavenCentral {
	release '4.25.0', {
		api 'org.eclipse.osgi'
		implementation 'org.osgi.service.component'
		compileOnly 'org.eclipse.core.runtime'
		// only needed for IdeMain
		compileOnly 'org.eclipse.ui.ide.application'

		dep 'testSetup1Implementation', 'org.eclipse.osgi'

		useNativesForRunningPlatform()
		constrainTransitivesToThisRelease()
	}
}
